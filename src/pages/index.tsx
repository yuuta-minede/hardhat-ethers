import React, { useState } from 'react';
import { useForm } from 'react-hook-form'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { ethers } from 'ethers'
import ContractJSON from '../contract/abi/abi.json'
import Addresses from '../contract/address/addresses'

// 応急措置
declare let window: any;

type FormState = {
  mintNum: number
}

export default function Home() {
  const contractAddress = Addresses.address
  const ContractABI = ContractJSON.abi

  // ローカル接続
  let network = 'http://localhost:8545'
  let provider = ethers.getDefaultProvider(network)

  const [defaultAccount, setDefaultAccount] = useState('connect Wallet')
  const [balance, setBalance] = useState(null)

  const { register, handleSubmit, formState: {errors} } = useForm<FormState>()
  const onSubmit = (data) => {
    console.log(data.mintNum)
    mintToken(data.mintNum)
  }

  const accountChangedHandler = (myAccount:string) => {
    setDefaultAccount(myAccount);
  }

  const getCurrentValue = async (myAccount): Promise<void> => {
    let balance = await provider.getBalance(myAccount)
    let balanceNumber = ethers.utils.formatEther(balance)
    setBalance(balanceNumber)
  }

  const ConnectMask = async (): Promise<boolean> => {
    try {
      await window.ethereum.request({ method: "eth_requestAccounts" }).then(result => {
        accountChangedHandler(result[0])
        getCurrentValue(result[0])
      })
    } catch (error: any) {
        console.log(error)
        return false
    }
  }

  const mintToken = async (x: number): Promise<void> => {
    const providers = await new ethers.providers.Web3Provider(window.ethereum);

    const signer = await providers.getSigner(0);
    await console.log(signer._address)
    const contract = new ethers.Contract(contractAddress, ContractABI, signer)
    await contract.mint(x)
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header>
        <p>{balance}eth</p>
        <p>{defaultAccount}</p>
        <button onClick={ConnectMask}>connect</button>
      </header>

      <main className={styles.main}>
        <form onSubmit={handleSubmit(onSubmit)}>
          <input
            placeholder='Enter the number of mint'
            defaultValue=""
            {...register('mintNum', { pattern: /^[0-9]+$/, required: true, min:1})}
          />
          {errors.mintNum ? (
            <span style={{ color: 'red' }}>This field is required</span>
          ): null}
          <button type="submit">mint</button>
        </form>
      </main>

      <footer className={styles.footer}>
      </footer>
    </div>
  )
}
